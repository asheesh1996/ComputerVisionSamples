@page "/"
@using BlazorCameraStreamer
@using ComputerVisionSamples
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


<PageTitle>Open CV Samples</PageTitle>

<div class="header-container">
    <FluentSwitch @bind-Value="@runOpenCvLoop" class="fluent-switch">Apply Effect</FluentSwitch>

    <button class="settings-button" @onclick="ToggleSettingsPanel">⚙️</button>
</div>

<div class="tabs-container">
    <FluentTabs @bind-ActiveTabId="@activeid" OnTabChange="HandleOnTabChange" Width="100%">
        @foreach (var example in imageProcessor.examplesNamesList)
        {
            <FluentTab Label=@example Id="@example">
                @* <p>Content for @activeid.</p> *@
            </FluentTab>
        }
    </FluentTabs>
</div>
<div class="options-container">
    <div class="@ContainerClass">
        <div class="video-container">
            <CameraStreamer @ref="cameraStreamer"
                            OnRendered="OnRenderedHandler"
                            OnFrame="OnFrameHandler"
                            Style="width: 100%; height: 100%;"
                            CameraID="@cameraId"
                            Autostart />
        </div>
        <div class="output-container">
            @if (!string.IsNullOrEmpty(OutputImage))
            {
                <img src="@OutputImage" class="output-image" />
            }
            else
            {
                <p>No output image available.</p>
            }
        </div>
    </div>
</div>

@if (showSettingsPanel)
{
    <div class="settings-panel">
        <label for="cameraDropdown">Select Camera</label>
        <div id="cameraDropdown">
            <FluentSelect TOption="Option<MediaDeviceInfoModel>" Appearance="Appearance.Outline" ValueChanged="OnCameraChanged">
                @foreach (var camera in availableCameras)
                {
                    <FluentOption Value="@camera.DeviceId">@camera.Label</FluentOption>
                }
            </FluentSelect>
        </div>
    </div>
}


@code {
    // Theme

    List<MediaDeviceInfoModel> availableCameras = new List<MediaDeviceInfoModel>();
    bool runOpenCvLoop = true;
    ImageProcessor imageProcessor = new ImageProcessor();
    // Camera
    private CameraStreamer cameraStreamer;
    private bool showSettingsPanel = false;
    string cameraId = null;
    string? activeid = "";

    private string ContainerClass { get; set; } = "container";
    private DotNetObjectReference<Home> objRef;


    protected override async Task OnInitializedAsync()
    {
        activeid = imageProcessor.examplesNamesList.First();
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("addResizeListener", objRef);
        await UpdateContainerClass();
    }
    [JSInvokable]
    public async Task OnResize()
    {
        await UpdateContainerClass();
        StateHasChanged(); // Notify Blazor to re-render
    }

    private async Task UpdateContainerClass()
    {
        var dimensions = await JSRuntime.InvokeAsync<WindowDimensions>("getWindowDimensions");
        ContainerClass = dimensions.Height > dimensions.Width ? "container vertical" : "container horizontal";
    }

    async void OnCameraChanged(string cameraName)
    {
        await cameraStreamer.ChangeCameraAsync(cameraName);
    }

    private async void OnRenderedHandler()
    {
        if (await cameraStreamer.GetCameraAccessAsync())
        {
            await cameraStreamer.ReloadAsync();
        }

        availableCameras = (await cameraStreamer.GetCameraDevicesAsync()).ToList();
    }
    FluentTab? CurrentTab;
    private void HandleOnTabChange(FluentTab tab)
    {
        CurrentTab = tab;
    }
    string OutputImage = "";
    private void OnFrameHandler(string data)
    {
        if (runOpenCvLoop)
        {
            imageProcessor.imageHeight = cameraStreamer.Height;
            imageProcessor.imageWidth = cameraStreamer.Width;
            Task.Run(() =>
            {
                try
                {
                    data = data[(data.IndexOf(',') + 1)..];
                    var datastream = Convert.FromBase64String(data);
                    var result = imageProcessor.ExecuteExample(activeid, datastream);
                    OutputImage = $"data:image;base64,{Convert.ToBase64String(result)}";
                    InvokeAsync(StateHasChanged);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            });
        }
    }

    private void ToggleSettingsPanel()
    {
        showSettingsPanel = !showSettingsPanel;
    }

    public void Dispose()
    {
        cameraStreamer.DisposeAsync();
        imageProcessor.Dispose();
        JSRuntime.InvokeVoidAsync("removeResizeListener");
        objRef?.Dispose();
    }
    private class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}

<style>
    .options-container {
        height: 100vh;
        padding: 0; /* Remove padding from the container */
        background-color: black;
        margin: 0; /* Remove margin from the container */
    }

    .container {
        display: flex;
        width: 100%;
        height: 100vh;
        padding: 0; /* Remove padding from the container */
        background-color: black;
    }

        .container.vertical {
            flex-direction: column; /* Stack vertically */
        }

        .container.horizontal {
            flex-direction: row; /* Stack horizontally */
        }


    .video-container, .output-container {
        background-color: black;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        width: 100%; /* Ensure both containers take full width */
        height: 100%
    }

    .output-image {
        width: 100%;
        height: 100%
        height: auto; /* Maintain aspect ratio */
        object-fit: contain;
    }



    .settings-panel {
        position: absolute;
        top: 50px;
        right: 50px;
        background-color: rgba(0, 0, 0, 0.8);
        padding: 10px;
        border-radius: 5px;
        z-index: 3;
        color: white;
    }

    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: absolute;
        top: 10px;
        width: 100%;
        padding-right: 10px;
        padding-bottom: 5px;
        padding-left: 10px;
    }

    .settings-button {
        background-color: transparent;
        cursor: pointer;
        font-size: 24px;
        color: white;
        right: 50px;
        padding: 5px;
    }

    .tabs-container {
        width: 100%;
        z-index: 5;
        background-color: rgba(0, 0, 0, 0.75);
        padding: 10px;
        border-radius: 5px;
        margin-top: 50px; /* Adjust this value based on the height of the header */
    }

</style>